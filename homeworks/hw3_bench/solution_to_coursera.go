// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package main

//import (
//	"bufio"
//	json "encoding/json"
//	"fmt"
//	easyjson "github.com/mailru/easyjson"
//	jlexer "github.com/mailru/easyjson/jlexer"
//	jwriter "github.com/mailru/easyjson/jwriter"
//	"io"
//	"os"
//	"strings"
//)
//
//// suppress unused package warning
//var (
//	_ *json.RawMessage
//	_ *jlexer.Lexer
//	_ *jwriter.Writer
//	_ easyjson.Marshaler
//)
//
//func easyjson9f2eff5fDecodeDStudyCourseraGolangSrc(in *jlexer.Lexer, out *User) {
//	isTopLevel := in.IsStart()
//	if in.IsNull() {
//		if isTopLevel {
//			in.Consumed()
//		}
//		in.Skip()
//		return
//	}
//	in.Delim('{')
//	for !in.IsDelim('}') {
//		key := in.UnsafeFieldName(false)
//		in.WantColon()
//		if in.IsNull() {
//			in.Skip()
//			in.WantComma()
//			continue
//		}
//		switch key {
//		case "browsers":
//			if in.IsNull() {
//				in.Skip()
//				out.Browsers = nil
//			} else {
//				in.Delim('[')
//				if out.Browsers == nil {
//					if !in.IsDelim(']') {
//						out.Browsers = make([]string, 0, 4)
//					} else {
//						out.Browsers = []string{}
//					}
//				} else {
//					out.Browsers = (out.Browsers)[:0]
//				}
//				for !in.IsDelim(']') {
//					var v1 string
//					v1 = string(in.String())
//					out.Browsers = append(out.Browsers, v1)
//					in.WantComma()
//				}
//				in.Delim(']')
//			}
//		case "company":
//			out.Company = string(in.String())
//		case "country":
//			out.Country = string(in.String())
//		case "email":
//			out.Email = string(in.String())
//		case "job":
//			out.Job = string(in.String())
//		case "name":
//			out.Name = string(in.String())
//		case "phone":
//			out.Phone = string(in.String())
//		default:
//			in.SkipRecursive()
//		}
//		in.WantComma()
//	}
//	in.Delim('}')
//	if isTopLevel {
//		in.Consumed()
//	}
//}
//func easyjson9f2eff5fEncodeDStudyCourseraGolangSrc(out *jwriter.Writer, in User) {
//	out.RawByte('{')
//	first := true
//	_ = first
//	{
//		const prefix string = ",\"browsers\":"
//		out.RawString(prefix[1:])
//		if in.Browsers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
//			out.RawString("null")
//		} else {
//			out.RawByte('[')
//			for v2, v3 := range in.Browsers {
//				if v2 > 0 {
//					out.RawByte(',')
//				}
//				out.String(string(v3))
//			}
//			out.RawByte(']')
//		}
//	}
//	{
//		const prefix string = ",\"company\":"
//		out.RawString(prefix)
//		out.String(string(in.Company))
//	}
//	{
//		const prefix string = ",\"country\":"
//		out.RawString(prefix)
//		out.String(string(in.Country))
//	}
//	{
//		const prefix string = ",\"email\":"
//		out.RawString(prefix)
//		out.String(string(in.Email))
//	}
//	{
//		const prefix string = ",\"job\":"
//		out.RawString(prefix)
//		out.String(string(in.Job))
//	}
//	{
//		const prefix string = ",\"name\":"
//		out.RawString(prefix)
//		out.String(string(in.Name))
//	}
//	{
//		const prefix string = ",\"phone\":"
//		out.RawString(prefix)
//		out.String(string(in.Phone))
//	}
//	out.RawByte('}')
//}
//
//// MarshalJSON supports json.Marshaler interface
//func (v User) MarshalJSON() ([]byte, error) {
//	w := jwriter.Writer{}
//	easyjson9f2eff5fEncodeDStudyCourseraGolangSrc(&w, v)
//	return w.Buffer.BuildBytes(), w.Error
//}
//
//// MarshalEasyJSON supports easyjson.Marshaler interface
//func (v User) MarshalEasyJSON(w *jwriter.Writer) {
//	easyjson9f2eff5fEncodeDStudyCourseraGolangSrc(w, v)
//}
//
//// UnmarshalJSON supports json.Unmarshaler interface
//func (v *User) UnmarshalJSON(data []byte) error {
//	r := jlexer.Lexer{Data: data}
//	easyjson9f2eff5fDecodeDStudyCourseraGolangSrc(&r, v)
//	return r.Error()
//}
//
//// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
//func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
//	easyjson9f2eff5fDecodeDStudyCourseraGolangSrc(l, v)
//}
//
//type User struct {
//	Browsers []string `json:"browsers"`
//	Company  string   `json:"company"`
//	Country  string   `json:"country"`
//	Email    string   `json:"email"`
//	Job      string   `json:"job"`
//	Name     string   `json:"name"`
//	Phone    string   `json:"phone"`
//}
//
//func Contains(a []string, x string) bool {
//	for _, n := range a {
//		if x == n {
//			return true
//		}
//	}
//	return false
//}
//
//func FastSearch(out io.Writer) {
//
//	file, err := os.Open(filePath)
//	if err != nil {
//		panic(err)
//	}
//	defer file.Close()
//
//	fmt.Fprintln(out, "found users:")
//
//	browsers := make([]string, 0, 1000)
//	i := -1
//	scanner := bufio.NewScanner(file)
//	for scanner.Scan() {
//
//		i++
//
//		user := User{}
//		err := user.UnmarshalJSON(scanner.Bytes())
//		if err != nil {
//			panic(err)
//
//		}
//
//		isAndroid := false
//		isMSIE := false
//
//		for _, browser := range user.Browsers {
//
//			if strings.Contains(browser, "Android") {
//				isAndroid = true
//			} else if strings.Contains(browser, "MSIE") {
//				isMSIE = true
//			} else {
//				continue
//			}
//
//			if !Contains(browsers, browser) {
//				browsers = append(browsers, browser)
//			}
//		}
//
//		if !(isAndroid && isMSIE) {
//			continue
//		}
//
//		// log.Println("Android and MSIE user:", user["name"], user["email"])
//		email := strings.ReplaceAll(user.Email, "@", " [at] ")
//		fmt.Fprintln(out, fmt.Sprintf("[%d] %s <%s>", i, user.Name, email))
//
//	}
//	if err := scanner.Err(); err != nil {
//		panic(err)
//	}
//
//	fmt.Fprintln(out, "\nTotal unique browsers", len(browsers))
//}
